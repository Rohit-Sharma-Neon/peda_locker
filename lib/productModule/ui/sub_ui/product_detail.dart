import 'package:cached_network_image/cached_network_image.dart';import 'package:cycle_lock/productModule/ui/sub_ui/address_book.dart';import 'package:cycle_lock/productModule/ui/sub_ui/cartscreen.dart';import 'package:cycle_lock/providers/address_provider.dart';import 'package:cycle_lock/providers/product_detail_provider.dart';import 'package:cycle_lock/utils/dialogs.dart';import 'package:cycle_lock/utils/images.dart';import 'package:easy_localization/easy_localization.dart';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:flutter/services.dart';import 'package:fluttertoast/fluttertoast.dart';import 'package:provider/provider.dart';import '../../../network/api_provider.dart';import '../../../responses/product_detail_modal.dart';import '../../../ui/widgets/common_widget.dart';import '../../../ui/widgets/loaders.dart';import '../../../utils/app_constants.dart';import '../../../utils/app_navigator.dart';import '../../../utils/colors.dart';import '../../../utils/contextnavigation.dart';// ignore: must_be_immutableclass ProductDetails extends StatefulWidget {  String? productId;  ProductDetails({Key? key, this.productId}) : super(key: key);  @override  State<ProductDetails> createState() => _ProductDetailsState();}class _ProductDetailsState extends State<ProductDetails> {  final GlobalKey<FormState> _formKey = GlobalKey();  List<ProductImage>? productImage = [];  Apis apis = Apis();  Data? data;  RangeValues _currentRangeValues = const RangeValues(10, 90);  bool isSwitched = false;  //PageController controller = PageController();  int currentIndex = 0;  var position = 0;  bool isTimeOut = false;  PageController controller =      PageController(viewportFraction: 1, keepPage: true);  int currentPos = 0;  List<ImageProvider> sliders = [];  // int _counter = 0;  var price;  void _incrementCounter() {    context.read<ProductDetailProvider>().incrementCounter();  }  void _decrementCounter() {    context.read<ProductDetailProvider>().decrementCounter();  }  //late PageController controller;  @override  void initState() {    SystemChrome.setSystemUIOverlayStyle(SystemUiOverlayStyle.light);    controller.addListener(() {      setState(() {        currentPos = controller.page!.toInt().round();      });    });    Future.delayed(Duration.zero, () {      if (mounted) {        productDetailsApi(widget.productId);      }    });    super.initState();  }  @override  void dispose() {    controller.dispose();    super.dispose();  }  @override  Widget build(BuildContext context) {    SystemChrome.setSystemUIOverlayStyle(SystemUiOverlayStyle.dark.copyWith(            statusBarColor: const Color(0xFF4A4F58),            /* set Status bar color in Android devices. */            statusBarIconBrightness: Brightness.light,            /* set Status bar icons color in Android devices.*/            systemNavigationBarColor: Colors.transparent,            systemNavigationBarIconBrightness: Brightness.dark,            statusBarBrightness:                Brightness.dark) /* set Status bar icon color in iOS. */        );    sliders.clear();    for (int i = 0; i < 3; i++) {      ImageProvider image = AssetImage(AppConstants.images[i]);      precacheImage(image, context);      sliders.add(image);    }    return Consumer<ProductDetailProvider>(      builder: (context, value, child) {        return Scaffold(            backgroundColor: Colors.white,            appBar: PreferredSize(              preferredSize: const Size.fromHeight(55),              // Set this height              child: Container(                margin: const EdgeInsets.only(top: 15),                width: MediaQuery.of(context).size.width,                child: Stack(                  children: [                    Container(                      color: const Color(0xFF4A4F58),                    ),                    Column(                      children: [                        Row(                          mainAxisAlignment: MainAxisAlignment.spaceBetween,                          children: [                            Container(                                padding:                                    const EdgeInsets.only(top: 40, left: 20),                                child: GestureDetector(                                  behavior: HitTestBehavior.translucent,                                  onTap: () {                                    Navigator.pop(context);                                  },                                  child: const SizedBox(                                    height: 16,                                    width: 24,                                    child: Icon(                                      Icons.arrow_back_ios_outlined,                                      color: Colors.white,                                    ),                                  ),                                )),                            Container(                              padding: const EdgeInsets.only(top: 40),                              alignment: Alignment.center,                              child: Row(                                crossAxisAlignment: CrossAxisAlignment.center,                                mainAxisAlignment: MainAxisAlignment.end,                                mainAxisSize: MainAxisSize.max,                                children: [                                  GestureDetector(                                    behavior: HitTestBehavior.translucent,                                    child: Container(                                      margin: const EdgeInsets.only(                                          right: 5, left: 5),                                      child: Row(                                        children: [                                          Container(                                              margin: const EdgeInsets.only(                                                  left: 5),                                              height: 20,                                              width: 20,                                              child: data?.product?.isFav == 0                                                  ? Image.asset(                                                      heart,                                                      color: Colors.white,                                                    )                                                  : Image.asset(                                                      fillheart,                                                      color: Colors.green,                                                    ))                                        ],                                      ),                                    ),                                  ),                                  GestureDetector(                                    behavior: HitTestBehavior.translucent,                                    child: Container(                                        margin: const EdgeInsets.only(                                            right: 20, left: 5),                                        height: 23,                                        width: 24,                                        child: data?.cartCount == 1                                            ? const Icon(                                                Icons.shopping_cart_outlined,                                                color: Colors.white,                                              )                                            : Container()),                                    onTap: () {},                                  )                                ],                              ),                            )                          ],                        ),                      ],                    ),                  ],                ),              ),            ),            body: SingleChildScrollView(                child: Column(              children: [                SizedBox(                    height: MediaQuery.of(context).size.height * 0.40,                    child: PageView.builder(                      itemCount: productImage?.length ?? 0,                      controller: controller,                      itemBuilder: (BuildContext context, int itemIndex) {                        return Container(                          margin: const EdgeInsets.only(                              top: 10, left: 16, right: 16),                          width: MediaQuery.of(context).size.width,                          height: MediaQuery.of(context).size.height * 0.20,                          child: CachedNetworkImage(                              imageUrl: productImage?[itemIndex].image ?? "",                              fit: BoxFit.cover,                              width: MediaQuery.of(context).size.width,                              placeholder: (context, url) =>                        Container(                        color: gray,                        ))                          // child: Image.network(                          //   productImage?[itemIndex].imageUrl ?? "",                          //   width: MediaQuery.of(context).size.width,                          //   fit: BoxFit.fill,                          // ),                        );                      },                    )),                Container(                    margin: const EdgeInsets.only(left: 0, top: 10),                    // height: MediaQuery.of(context).size.height,                    // width: MediaQuery.of(context).size.width,                    decoration: const BoxDecoration(                      borderRadius: BorderRadius.only(                          topLeft: Radius.circular(40),                          topRight: Radius.circular(40)),                      color: Color(0xFFF2F2F2),                    ),                    child: Container(                        margin:                            const EdgeInsets.only(left: 15, right: 15, top: 0),                        child: Column(                          children: [                            Align(                              alignment: FractionalOffset.center,                              child: Container(                                margin:                                    const EdgeInsets.only(bottom: 0, top: 30),                                child: Row(                                  mainAxisAlignment: MainAxisAlignment.center,                                  children: _buildPageIndicator(),                                ),                              ),                            ),                            const SizedBox(                              height: 20,                            ),                            Text(                              data?.product?.name ?? "".tr(),                              style: const TextStyle(                                  color: Colors.black, fontSize: 18),                            ),                            const SizedBox(                              height: 20,                            ),                            Row(                              mainAxisAlignment: MainAxisAlignment.spaceBetween,                              children: [                                Align(                                    alignment: Alignment.centerLeft,                                    child: Padding(                                      padding: const EdgeInsets.only(left: 3.0),                                      child: Text(                                        'BikeParts|Wheels'.tr(),                                        style: const TextStyle(                                            color: Colors.green,                                            fontSize: 18,                                            fontWeight: FontWeight.w500),                                      ),                                    )),                                const Spacer(),                                Container(                                  padding: const EdgeInsets.symmetric(                                      vertical: 2, horizontal: 4),                                  decoration: BoxDecoration(                                    borderRadius: BorderRadius.circular(4),                                    color: Colors.white,                                  ),                                  // child: Row(                                  //   children: [                                  //     Icon(Icons.star,                                  //         size: 16, color: Colors.yellow.shade700),                                  //     richText("4.5".tr(),                                  //         maxLines: 2,                                  //         style: const TextStyle(                                  //             fontWeight: FontWeight.w500,                                  //             fontSize: 14,                                  //             color: Colors.black)),                                  //   ],                                  // ),                                )                              ],                            ),                            const SizedBox(                              height: 10,                            ),                            Row(                              children: [                                Text(                                  "AED ${price ?? "".tr()}",                                  style: const TextStyle(                                      color: Colors.black,                                      fontWeight: FontWeight.w500,                                      fontSize: 24),                                ),                                // Padding(                                //   padding: const EdgeInsets.only(left: 8.0),                                //   child: Align(                                //     alignment: Alignment.centerLeft,                                //     child: richText(price ?? "".tr(),                                //         maxLines: 2,                                //         style: const TextStyle(                                //             fontWeight: FontWeight.w500,                                //             fontSize: 14,                                //             decoration: TextDecoration.lineThrough,                                //             color: lightGreyColor)),                                //   ),                                // ),                              ],                            ),                            const SizedBox(                              height: 15,                            ),                            Row(                              children: [                                const Icon(                                  Icons.notifications_none,                                  color: Colors.black,                                  size: 25,                                ),                                Text(                                  'StockAvailability'.tr(),                                  style: const TextStyle(                                      color: Colors.black,                                      fontSize: 18,                                      fontWeight: FontWeight.w500),                                )                              ],                            ),                            const SizedBox(                              height: 20,                            ),                            ListView.builder(                                shrinkWrap: true,                                physics: const NeverScrollableScrollPhysics(),                                scrollDirection: Axis.vertical,                                itemCount: data?.product?.variant?.length,                                itemBuilder: (BuildContext context, int index) {                                  return Column(                                    crossAxisAlignment:                                        CrossAxisAlignment.start,                                    mainAxisAlignment: MainAxisAlignment.start,                                    children: [                                      SizedBox(                                        width: 74,                                        child: Align(                                            alignment: Alignment.centerLeft,                                            child: Padding(                                              padding: const EdgeInsets.only(                                                  left: 8.0),                                              child: Text(                                                data?.product?.variant?[index]                                                        .variantName ??                                                    "".tr(),                                                style: const TextStyle(                                                    color: Colors.black,                                                    fontWeight: FontWeight.w500,                                                    fontSize: 18),                                              ),                                            )),                                      ),                                      SizedBox(                                        height: 44,                                        child: Card(                                          child: Padding(                                            padding: const EdgeInsets.symmetric(                                                horizontal: 16),                                            child: Text(data                                                    ?.product                                                    ?.variant?[index]                                                    .variantValue ??                                                "".toString().tr()),                                          ),                                        ),                                      )                                    ],                                  );                                }),                            // const SizedBox(                            //   height: 20,                            // ),                            // Align(                            //     alignment: Alignment.centerLeft,                            //     child: Text(                            //       'Quantity'.tr(),                            //       style: const TextStyle(                            //           color: Colors.black,                            //           fontWeight: FontWeight.w500,                            //           fontSize: 18),                            //     )),                            // const SizedBox(                            //   height: 10,                            // ),                            // Container(                            //   height: 50,                            //   decoration: const BoxDecoration(                            //       borderRadius: BorderRadius.all(Radius.circular(20)),                            //       color: Colors.white),                            //   child: Row(                            //     mainAxisAlignment: MainAxisAlignment.center,                            //    // mainAxisAlignment: value.counter > 0 ? MainAxisAlignment.spaceBetween : MainAxisAlignment.end,                            //     children: [                            //       if(value.counter > 0)                            //       // GestureDetector(                            //       //     onTap: () async {                            //       //       if (value.counter != 1) {                            //       //         int count = value.counter - 1;                            //       //         // await addToCartApi(                            //       //         //     widget.productId, count, false);                            //       //         _decrementCounter();                            //       //       }                            //       //     },                            //       //     child: Container(                            //       //         margin:                            //       //             const EdgeInsets.only(left: 5),                            //       //         child: Image.asset(                            //       //           minesIcon,                            //       //           height: 40,                            //       //           width: 40,                            //       //         ))),                            //       if(value.counter > 0)                            //       Align(                            //         alignment: Alignment.center,                            //           child: Text(                            //         '${value.counter}',                            //         style: const TextStyle(                            //             color: Colors.black, fontSize: 14),                            //       )),                            //       // GestureDetector(                            //       //     onTap: () async {                            //       //       int count = value.counter + 1;                            //       //       // await addToCartApi(                            //       //       //     widget.productId, count, false);                            //       //       _incrementCounter();                            //       //     },                            //       //     child: Container(                            //       //         margin:                            //       //             const EdgeInsets.only(right: 5),                            //       //         child: Image.asset(                            //       //           addIcon,                            //       //           height: 40,                            //       //           width: 40,                            //       //         ))),                            //     ],                            //   ),                            // ),                            const SizedBox(                              height: 20,                            ),                            Align(                                alignment: Alignment.centerLeft,                                child: Text(                                  'Description'.tr(),                                  style: const TextStyle(                                      color: Colors.black,                                      fontWeight: FontWeight.w500,                                      fontSize: 18),                                )),                            const SizedBox(                              height: 10,                            ),                            Align(                                alignment: Alignment.centerLeft,                                child: Text(                                  data!.product!.description ?? "".tr(),                                  style: const TextStyle(                                      color: Colors.black,                                      fontWeight: FontWeight.w400,                                      fontSize: 14),                                )),                            const SizedBox(                              height: 10,                            ),                            Container(                                margin: const EdgeInsets.only(bottom: 20),                                child: Row(                                  mainAxisAlignment:                                      MainAxisAlignment.spaceBetween,                                  children: [                                    GestureDetector(                                        onTap: () async {                                          int count = value.counter;                                          if (count > 0) {                                            openAddCart(context);                                          } else {                                            int count = value.counter + 1;                                            addToCartApi(                                                widget.productId, count, true);                                          }                                        },                                        // onTap: () async {                                        //   if (value.counter > 0) {                                        //     openAddCart(context);                                        //   } else {                                        //     int count = value.counter;                                        //     await addToCartApi(                                        //         widget.productId, count, false);                                        //     _incrementCounter();                                        //   }                                        // },                                        child: Container(                                          height: 45,                                          width: 150,                                          decoration: const BoxDecoration(                                              borderRadius: BorderRadius.all(                                                  Radius.circular(10)),                                              color: Color(0xFF79BF89)),                                          child: Align(                                              alignment: Alignment.center,                                              child: Text(                                                value.counter > 0                                                    ? "ViewCart".tr()                                                    : "AddToCart".tr(),                                                style: const TextStyle(                                                    color: Colors.white,                                                    fontSize: 16),                                              )),                                        )),                                    GestureDetector(                                      onTap: () async {                                        int count = value.counter;                                        if (count > 0) {                                          openAddCart(context);                                        } else {                                          int count = value.counter + 1;                                          addToCartApi(                                              widget.productId, count, true);                                        }                                        /*addToCartApi(                                            widget.productId, count, true);*/                                      },                                      child: Container(                                        height: 45,                                        width: 150,                                        decoration: const BoxDecoration(                                            borderRadius: BorderRadius.all(                                                Radius.circular(10)),                                            color: Color(0xFF79BF89)),                                        child: Align(                                            alignment: Alignment.center,                                            child: Text(                                              "BuyNow".tr(),                                              style: const TextStyle(                                                  color: Colors.white,                                                  fontSize: 16),                                            )),                                      ),                                    )                                  ],                                ))                          ],                        ))),                // RangeSlider(                //   values: _currentRangeValues,                //   min: 0,                //   max: 100,                //   //divisions: 10,                //   activeColor: Color(0xFF79BF89),                //   inactiveColor: Colors.white,                //   labels: RangeLabels(                //     _currentRangeValues.start.round().toString(),                //     _currentRangeValues.end.round().toString(),                //   ),                //   onChanged: (RangeValues values) {                //     setState(() {                //       _currentRangeValues = values;                //     });                //   },                // ),              ],            )));      },    );  }  List<Widget> _buildPageIndicator() {    List<Widget> list = [];    for (int i = 0; i < productImage!.length; i++) {      list.add(i == currentPos ? _indicator(true) : _indicator(false));    }    return list;  }  Widget _indicator(bool isActive) {    return SizedBox(      height: 10,      child: AnimatedContainer(        duration: const Duration(milliseconds: 150),        margin: const EdgeInsets.symmetric(horizontal: 4.0),        height: isActive ? 12 : 10.0,        width: isActive ? 12 : 10.0,        decoration: BoxDecoration(          boxShadow: [            isActive                ? BoxShadow(                    color: const Color(0XFF2FB7B2).withOpacity(0.72),                    blurRadius: 4.0,                    spreadRadius: 1.0,                    offset: const Offset(                      0.0,                      0.0,                    ),                  )                : const BoxShadow(                    color: Colors.transparent,                  )          ],          shape: BoxShape.circle,          color: isActive ? Colors.green : Colors.black,        ),      ),    );  }  onchahged(int index) {    setState(() {      currentIndex = index + 1;    });  }  productDetailsApi(productId) async {    var context = NavigationService.navigatorKey.currentContext;    Loaders().loader(context!);    apis.productdetailsApi(productId).then((value) {      Navigator.pop(context);      if (value?.status ?? false) {        setState(() {          data = value!.data;          price = data?.product?.price ?? "";          context              .read<ProductDetailProvider>()              .setCounter(value.data?.product?.cartCount ?? 0);          if (data!.product!.productImage!.isNotEmpty) {            productImage?.addAll(data!.product!.productImage!);            //productImage?.addAll(data?.product?.productImage??"");          } else {            productImage?.add(ProductImage(image: data?.product?.image));          }        });      } else {        Fluttertoast.showToast(msg: value?.message ?? "");      }    });  }  addToCartApi(productId, qty, bool? isBuyNow) async {    var context = NavigationService.navigatorKey.currentContext;    if (context!.read<AddressProvider>().defaultAddress != null) {      String? addressId =          context.read<AddressProvider>().defaultAddress?.id.toString() ?? "";      Loaders().loader(context);      apis.addToCartApi(productId, qty, addressId).then((value) {        Navigator.pop(context);        if (value?.status ?? false) {          if (isBuyNow == true) {           // _incrementCounter();            openAddCart(context);          }        } else {          if (value?.is_location == true) {            appRedirectDialog(              context,              value?.message ?? "",              onPressed: () {                Navigator.pop(context);                Navigator.push(                    context,                    MaterialPageRoute(                        builder: (context) => AddressBookScreen()));              },            );          } else {            appRedirectDialog(context, value?.message ?? "");          }        }      });    } else {      appRedirectDialog(        context,        "Please add your default address",        onPressed: () {          Navigator.pop(context);          Navigator.push(context,              MaterialPageRoute(builder: (context) => const AddressBookScreen()));        },      );    }  }  openAddCart(context) {    Navigator.push(        context,        MaterialPageRoute(          builder: (context) => const AddCart(),        )).then((value) => {          Future.delayed(Duration.zero, () {            if (mounted) {              productDetailsApi(widget.productId);            }          })        });  }}